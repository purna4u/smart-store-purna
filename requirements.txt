colorama==0.4.6
loguru==0.7.3
numpy==2.2.6
pandas==2.2.3
python-dateutil==2.9.0.post0
pytz==2025.2
six==1.17.0
tzdata==2025.2
win32_setctime==1.2.0





# P6: BI Insights and Storytelling with OLAP

This project performs an On-Line Analytical Processing (OLAP) analysis of the Smart Sales data warehouse. The goal is to answer a specific business question, handle data quality issues, and present a final, actionable insight supported by a visualization.


## Section 1: The Business Goal

**Business Question:** How does sales performance differ across customer segments, and what are the peak purchasing days for our core 'Regular' customers?

**Why it matters:** Instead of generic marketing, understanding the behavior of specific customer segments allows for targeted promotions. By identifying when our most common customers ('Regulars') are most active, we can optimize ad spending and campaign timing to maximize engagement and revenue.

---

## Section 2: Data Source

This analysis queried the `smart_sales.db` SQLite data warehouse directly.

* **Tables Used:**
    * `sale`
    * `customer`
    * `product`
* **Columns Used:**
    * `sale`: `sale_date`, `sale_amount`, `customer_id`, `product_id`
    * `customer`: `customer_segment`, `customer_id`
    * `product`: `category`, `product_id`

---

## Section 3: Tools

* **Tool:** Python 3.10
* **Libraries:**
    * `sqlite3`: To connect to and query the SQLite data warehouse.
    * `pandas`: For data manipulation, cleaning, transformation, and analysis. It was essential for handling data quality issues and performing OLAP-style operations.
    * `seaborn` & `matplotlib`: For creating the final data visualization to communicate the results.

This Python-based toolkit was chosen for its power and flexibility, allowing for a reproducible workflow from raw data to final insight in a single script.

---

## Section 4: Workflow & Logic

The project followed a systematic workflow involving data loading, extensive cleaning, transformation, and finally, analysis.

**1. Data Loading:** Data was loaded by joining the `sale`, `customer`, and `product` tables using the following SQL query:
````python
# Corrected SQL Query
query = """
SELECT
    s.sale_date,
    s.sale_amount,
    p.category,
    c.customer_segment
FROM sale s
JOIN customer c ON s.customer_id = c.customer_id
JOIN product p ON s.product_id = p.product_id;
"""
df = pd.read_sql_query(query, conn)